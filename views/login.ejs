<!DOCTYPE html>
<html lang="fr">
  <%- include('partials/head') %>
  <body>
    <%- include('partials/header') %>

    <div class="central">
      <h1><%= title %></h1>
      <br />
      <div id="login">
        <form>
          <legend>Veuillez saisir vos identifiants</legend>
          <label for="email">Email : </label>
          <input type="text" name="email" id="email" />
          <label for="password">Mot de passe : </label>
          <input type="password" name="password" id="password" />
          <button type="submit">Connexion</button>
        </form>
      </div>

      <div id="profile" style="display: none">
        <button id="disconnectBtn">Déconnexion</button>
        <button id="display-payload">Voir le payload</button>
        <div id="decoded-payload"></div>
        <div>
          <a href="#" id="member-only">espace membre</a>
        </div>
      </div>
    </div>

    <footer><%- include('partials/footer') %></footer>
    <script>
      // DOM Elements
      const form = document.querySelector("form");
      const loginArea = document.querySelector("#login");
      const profileArea = document.querySelector("#profile");
      const displayPayloadBtn = document.querySelector("#display-payload");
      const disconnectBtn = document.querySelector("#disconnectBtn");
      const connectionLinkArea = document.querySelector("#connectionLink");
      const memberOnlyLink = document.querySelector("#member-only");

      // Event Listeners
      form.addEventListener("submit", handleLogin);
      displayPayloadBtn.addEventListener("click", displayPayload);
      disconnectBtn.addEventListener("click", logoutUser);
      memberOnlyLink.addEventListener("click", makeRequestWithToken);

      // Initialize UI based on authentication state
      initializeUI();

      // UI Functions
      function initializeUI() {
        if (localStorage.getItem("token")) {
          showLoggedInUI();
        } else {
          showLoggedOutUI();
        }
      }

      function showLoggedInUI() {
        loginArea.style.display = "none";
        profileArea.style.display = "block";
        connectionLinkArea.innerHTML =
          '<a href="/login" class="nav-link" style="color: white !important; text-decoration: none !important;">Déconnexion</a>';
      }

      function showLoggedOutUI() {
        loginArea.style.display = "block";
        profileArea.style.display = "none";
        connectionLinkArea.innerHTML = '<a href="/login" class="nav-link" style="color: white !important; text-decoration: none !important;">Connexion</a>';
      }

      // Authentication Functions
      function handleLogin(event) {
        event.preventDefault();
        console.log("Processing login");

        const email = document.getElementById("email").value;
        const password = document.getElementById("password").value;
        const payload = `email=${email}&password=${password}`;

        const xhr = new XMLHttpRequest();
        xhr.open("POST", "/login", true);
        xhr.setRequestHeader(
          "Content-type",
          "application/x-www-form-urlencoded"
        );

        xhr.onreadystatechange = function () {
          if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
            handleSuccessfulLogin(xhr.response);
          }
        };

        xhr.send(payload);
      }

      function handleSuccessfulLogin(tokenResponse) {
        console.log("Raw token received:", tokenResponse);

        try {
          // Try to parse it in case it's a JSON string
          const parsedToken = JSON.parse(tokenResponse);
          console.log("Parsed token:", parsedToken);
          localStorage.setItem("token", parsedToken);
        } catch (e) {
          // If it's not JSON, store it directly
          console.log("Token is not JSON, storing directly");
          localStorage.setItem("token", tokenResponse);
        }

        console.log(
          "Token stored in localStorage:",
          localStorage.getItem("token")
        );
        showLoggedInUI();
        form.reset();
      }

      function logoutUser() {
        localStorage.removeItem("token");
        showLoggedOutUI();
      }

      // JWT Functions
      function parseJwt() {
        const tokenFromStorage = localStorage.getItem("token");
        if (tokenFromStorage) {
          const base64Payload = tokenFromStorage.split(".")[1];
          return JSON.parse(window.atob(base64Payload));
        } else {
          return "no token to parse";
        }
      }

      function displayPayload() {
        const payload = parseJwt();
        const decodedPayloadDiv = document.querySelector("#decoded-payload");
        decodedPayloadDiv.innerHTML = `<pre>${JSON.stringify(payload)}</pre>`;
      }

      // API Request Functions
      function makeRequestWithToken(evt) {
        evt.preventDefault();

        const page = this.id;
        let tokenFromStorage = localStorage.getItem("token");
        console.log("Raw token from storage:", tokenFromStorage);

        const config = {};

        if (tokenFromStorage) {
          config.headers = {
            Authorization: `Bearer ${tokenFromStorage}`,
          };
        }

        console.log("Token being sent:", tokenFromStorage);
        console.log("Full Authorization header:", `Bearer ${tokenFromStorage}`);
        console.log("Full config object:", JSON.stringify(config));

        axios
          .get(`http://localhost:3000/${page}`, config)
          .then((res) => {
            console.log("Success");
            console.log(res);
          })
          .catch((err) => {
            console.error("makeRequestWithToken error:", err);
          });
      }
    </script>
  </body>
</html>
